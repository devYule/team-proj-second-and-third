{"version":3,"file":"static/js/483.777dfd71.chunk.js","mappings":"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","sources":["pages/join/JoinKakaoPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Layout from \"../../layouts/Layout\";\nimport DaumPostcode from \"react-daum-postcode\";\nimport {\n  BtSection,\n  CancelBt,\n  ConfirmBt,\n  ImageInputBt,\n  InputValid,\n  JoinAddressInput,\n  JoinBox,\n  JoinElement,\n  JoinElementInput,\n  JoinElementInputBox,\n  JoinElementTxt,\n  JoinPageStyle,\n  SaveBt,\n  ShowPasswordBt,\n  ShowPasswordImg,\n} from \"../../styles/join/JoinPageStyle\";\nimport { JoinHeader } from \"../../styles/join/JoinFirstPageStyle\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Modal } from \"../../components/address/Address\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useForm } from \"react-hook-form\";\nimport JoinPopUp, {\n  ModalBackground,\n} from \"../../components/joinpopup/JoinPopUp\";\nimport {\n  idOverlapPost,\n  joinPost,\n  nickOverlapPost,\n  verificationGet,\n  verificationPost,\n} from \"../../api/join/join_api\";\nimport VerificationModal from \"../../components/joinpopup/VerificationModal\";\nimport VerificationOk from \"../../components/joinpopup/VerificationOk\";\n\nconst JoinKakaoPage = () => {\n  // 중복확인(닉네임)\n  const [nickOverlapConfirm, setNickOverlapConfirm] = useState(false);\n  const [nickConfirmModal, setNickConfirmModal] = useState(false);\n  const [nickFailModal, setNickFailModal] = useState(false);\n  const [nickNullModal, setNickNullModal] = useState(false);\n\n  const NickOverlap = () => {\n    const obj = {\n      div: 1,\n      uid: \"userId123\",\n      nick: nickname,\n    };\n    nickOverlapPost(obj, () => {\n      setIsValid(2); \n      nickPostSuccess();\n    }, nickPostFail);\n  };\n  const NickOverlapBt = e => {\n    e.preventDefault();\n    NickOverlap();\n  };\n  const nickPostSuccess = () => {\n    setNickOverlapConfirm(true);\n    setNickConfirmModal(true);\n  };\n  const closeNickConfirmModal = () => {\n    setNickConfirmModal(false);\n  };\n  const nickPostFail = () => {\n    setNickFailModal(true);\n  };\n  const closeNickFailModal = () => {\n    setNickFailModal(false);\n  };\n  const nickNullBt = () => {\n    setNickNullModal(true);\n  };\n  const closeNickNullBt = () => {\n    setNickNullModal(false);\n  };\n\n  // 이미지 업로드\n  const [uploadImg, setUploadImg] = useState(\n    `${process.env.PUBLIC_URL}/images/join/join_img.svg`,\n  );\n  const [uploadImgFile, setUploadImgFile] = useState(null);\n\n  const handleChangeFileOne = e => {\n    const file = e.target.files[0];\n    if (file) {\n      // 미리보기\n      const tempUrl = URL.createObjectURL(file);\n      setUploadImg(tempUrl); // 미리보기 끝\n      // FB 파일을 보관\n      setUploadImgFile(file); // 파일 1개 추가 끝\n    }\n  };\n\n  // 주소 검색 모달창\n  const [addrModal, setAddrModal] = useState(false);\n\n  const handleSelectAddress = data => {\n    const selectedAddress = data.address;\n    setAddress(selectedAddress);\n    setAddrModal(false);\n    console.log(address);\n  };\n  const handleClickButton = () => {\n    setAddrModal(true);\n  };\n  const handleCloseModal = () => {\n    setAddrModal(false);\n  };\n\n  // 양식 검증(yup)\n  const phoneRegExp = /^(\\d{3})-(\\d{4})-(\\d{4})$/;\n  const validationSchema = yup.object().shape({\n    nickname: yup\n      .string()\n      .max(20, \"20자까지만 입력하세요 \")\n      .required(\"닉네임은 필수 입력 사항입니다.\"),\n    phoneNumber: yup\n      .string()\n      .matches(phoneRegExp, \"전화번호가 올바르지 않습니다.\")\n      .required(\"휴대폰 번호는 필수 입력 사항입니다.\"),\n    email: yup\n      .string()\n      .email(\"이메일 형식이 올바르지 않습니다.\")\n      .required(\"이메일은 필수 입력 사항입니다.\")\n      .max(30, \"30자까지만 입력하세요 \"),\n  });\n\n  const { register, handleSubmit, formState, watch } = useForm({\n    resolver: yupResolver(validationSchema),\n    mode: \"onChange\",\n  });\n\n  \n  const searchParams = new URLSearchParams(location.search);\n  const accessToken  = searchParams.get(\"accessToken\");\n  const userId = accessToken.substring(0, 8);\n  const startIndex = accessToken.length - 8;\n  const password = accessToken.substring(startIndex);\n//   console.log(\"userId\",userId,\"password\",password)\n\n  const [photo, setPhoto] = useState(\"\");\n  const nickname = watch(\"nickname\");\n  const phoneNumber = watch(\"phoneNumber\");\n  const [address, setAddress] = useState(\"\");\n  const [restAddress, setRestAddress] = useState(\"\");\n  const [isValid, setIsValid] = useState(0);\n  const email = watch(\"email\");\n\n\n  const handleChangeAddress = e => {\n    setAddress(e.target.value);\n  };\n  const handleChangeRestAddress = e => {\n    setRestAddress(e.target.value);\n  };\n\n  // 본인 인증 버튼\n  const [verificationModal, setVerificationModal] = useState(false);\n  const [verificationId, setVerificationId] = useState(\"\");\n  const [resultOk, setResultOk] = useState(false);\n  const [verifiData, setVerifiData] = useState();\n  const [verifiResultModal, setVerifiResultModal] = useState(false);\n   \n  const verifiResultonConfirm = () => {\n    setVerifiResultModal(true);\n  }\n\n  const verifiResultClose = () => {\n    setVerifiResultModal(false);\n  }\n\n  const verificationConfirm = () => {\n    setVerificationModal(true);\n  };\n  const closeVerificationModal = () => {\n    setVerificationModal(false);\n  };\n\n  const onVerifiConfirm = async (id) => {\n    try {\n      let result;\n      result = await verificationGet(id);\n      \n      if (result) {\n        setVerifiData(result);\n        setVerificationModal(false);\n        setResultOk(true);\n      } else {\n        console.log(\"Result is empty\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  \n  // 데이터 연동(회원가입)\n  const handleSubmitJoin = async () => {\n    const formData = new FormData();\n    const dto = new Blob(\n      [\n        JSON.stringify({\n          addr: address,\n          restAddr: restAddress,\n          uid: userId,\n          upw: password,\n          nick: nickname,\n          phone: phoneNumber,\n          email: email,\n          isValid: isValid,\n          iverificationInfo: verificationId,\n        }),\n      ],\n      { type: \"application/json\" },\n    );\n    formData.append(\"dto\", dto);\n\n    if (uploadImgFile) {\n      console.log(uploadImgFile);\n      const response = await fetch(uploadImg);\n      const blob = await response.blob();\n      const currentDate = new Date();\n      const seconds = Math.floor(currentDate.getTime() / 1000);\n      const file = new File([blob], `image${seconds}.jpg`, {\n        type: \"image/jpeg\",\n      });\n\n      formData.append(\"pic\", file);\n    }\n    for (const pair of formData.entries()) {\n      console.log(pair[0] + \": \" + pair[1]);\n    }\n\n    try {\n      joinPost({obj: formData});\n      navigate(`/join/step_3?nick=${nickname}`);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // 취소 & 저장 버튼\n  const [catchErr, setCatchErr] = useState(false);\n  const navigate = useNavigate();\n\n  const handleCancel = () => {\n    navigate(`/login`);\n  };\n\n  const handleNotValid = e => {\n    setCatchErr(true);\n  };\n\n  return (\n    <Layout>\n      {nickConfirmModal && (\n        <>\n          <JoinPopUp\n            txt=\"사용 가능한 닉네임입니다.\"\n            onConfirm={closeNickConfirmModal}\n          />\n          <ModalBackground></ModalBackground>\n        </>\n      )}\n      {nickFailModal && (\n        <>\n          <JoinPopUp\n            txt=\"사용할 수 없는 닉네임입니다.\"\n            onConfirm={closeNickFailModal}\n          />\n          <ModalBackground></ModalBackground>\n        </>\n      )}\n      {nickNullModal && (\n        <>\n          <JoinPopUp txt=\"닉네임을 입력해주세요.\" onConfirm={closeNickNullBt} />\n          <ModalBackground></ModalBackground>\n        </>\n      )}\n\n      {verificationModal && (\n        <>\n          <VerificationModal closeModal={closeVerificationModal} \n          onConfirm={onVerifiConfirm} \n          verificationId={verificationId}\n          setVerificationId={setVerificationId}/>\n          <ModalBackground></ModalBackground>\n        </>\n      )}\n\n      {verifiResultModal && (\n        <>\n          <VerificationOk closeModal={verifiResultClose} verifiData={verifiData}/>\n          <ModalBackground></ModalBackground>\n        </>\n      )}\n\n      {addrModal && (\n        <Modal handleClose={handleCloseModal}>\n          <DaumPostcode onComplete={handleSelectAddress} autoClose={false} />\n        </Modal>\n      )}\n\n      <JoinPageStyle>\n        <JoinHeader>\n          <p>회원가입</p>\n          <img src=\"/images/join/join_step2.svg\" />\n        </JoinHeader>\n        <JoinBox onSubmit={handleSubmit(handleSubmitJoin)}>\n          <JoinElement>\n            <JoinElementTxt>\n              <p>사진</p>\n              <span>*</span>\n            </JoinElementTxt>\n            <JoinElementInputBox>\n              <JoinElementInput>\n                <label htmlFor=\"img\">\n                  <ImageInputBt\n                    type=\"button\"\n                    onClick={() => {\n                      document.getElementById(\"img\").click();\n                    }}\n                  >\n                    <img src={uploadImg} alt=\"\" />\n                  </ImageInputBt>\n                </label>\n                <input\n                  type=\"file\"\n                  {...register(\"photo\")}\n                  accept=\"image/png, image/gif, image/jpeg\"\n                  onClick={() => {\n                    document.getElementById(\"img\").click();\n                  }}\n                  onChange={event => {\n                    handleChangeFileOne(event, \"before\");\n                  }}\n                  id=\"img\"\n                  style={{ display: \"none\" }}\n                />\n              </JoinElementInput>{\" \"}\n              {uploadImgFile === null && catchErr ? (\n                <InputValid>사진을 선택해주세요.</InputValid>\n              ) : (\n                \"\"\n              )}\n            </JoinElementInputBox>\n          </JoinElement>\n\n          <JoinElement>\n            <JoinElementTxt>\n              <p>닉네임</p>\n              <span>*</span>\n            </JoinElementTxt>\n            <JoinElementInputBox>\n              <JoinElementInput width=\"440px\">\n                <input\n                  type=\"text\"\n                  maxLength={20}\n                  placeholder=\"20자 이내\"\n                  name=\"nickname\"\n                  {...register(\"nickname\")}\n                />\n                {!nickname ? (\n                  <ConfirmBt onClick={nickNullBt} type=\"button\">\n                    중복 확인\n                  </ConfirmBt>\n                ) : (\n                  <ConfirmBt onClick={NickOverlapBt} type=\"button\">\n                    중복 확인\n                  </ConfirmBt>\n                )}\n              </JoinElementInput>\n              {catchErr && formState.errors.nickname && (\n                <InputValid>{formState.errors.nickname?.message}</InputValid>\n              )}\n              {catchErr &&\n                !nickOverlapConfirm &&\n                !formState.errors.nickname && (\n                  <InputValid>닉네임 중복 확인을 해주세요.</InputValid>\n                )}\n            </JoinElementInputBox>\n          </JoinElement>\n\n          <JoinElement>\n            <JoinElementTxt>\n              <p>휴대폰 번호</p>\n              <span>*</span>\n            </JoinElementTxt>\n            <JoinElementInputBox>\n              <JoinElementInput width=\"440px\">\n                <input\n                  type=\"text\"\n                  placeholder=\"예) 010-0000-0000\"\n                  name=\"phoneNumber\"\n                  {...register(\"phoneNumber\")}\n                />\n                {resultOk === true ? (\n                  <ConfirmBt width={\"130px\"} type=\"button\"\n                  onClick={()=> {verifiResultonConfirm()}}>\n                    본인 결과 확인\n                  </ConfirmBt>\n                ) : (\n                  <ConfirmBt width={\"130px\"} type=\"button\"\n                  onClick={()=> {verificationConfirm()}}>\n                     본인 인증 확인\n                  </ConfirmBt>\n                )}\n              </JoinElementInput>\n              <InputValid>{formState.errors.phoneNumber?.message}</InputValid>\n            </JoinElementInputBox>\n          </JoinElement>\n\n          <JoinElement>\n            <JoinElementTxt>\n              <p>주소</p>\n              <span>*</span>\n            </JoinElementTxt>\n            <JoinElementInputBox>\n              <JoinAddressInput>\n                <input\n                  type=\"text\"\n                  value={address}\n                  placeholder=\"주소를 검색해주세요.\"\n                  onClick={handleClickButton}\n                  readOnly\n                  name=\"address\"\n                  onChange={handleChangeAddress}\n                />\n                {catchErr && address === \"\" && (\n                  <InputValid>주소를 검색해주세요.</InputValid>\n                )}\n                <input\n                  type=\"text\"\n                  value={restAddress}\n                  placeholder=\"상세 주소를 입력해주세요.\"\n                  name=\"restAddress\"\n                  onChange={handleChangeRestAddress}\n                />\n                {catchErr && restAddress === \"\" && (\n                  <InputValid>상세 주소를 입력해주세요.</InputValid>\n                )}\n              </JoinAddressInput>\n            </JoinElementInputBox>\n          </JoinElement>\n\n          <JoinElement>\n            <JoinElementTxt>\n              <p>이메일</p>\n              <span>*</span>\n            </JoinElementTxt>\n            <JoinElementInputBox>\n              <JoinElementInput>\n                <input\n                  type=\"email\"\n                  maxLength={30}\n                  placeholder=\"예) a123@naver.com\"\n                  name=\"email\"\n                  {...register(\"email\")}\n                />\n              </JoinElementInput>\n              {catchErr && formState.errors.email && (\n                <InputValid>{formState.errors.email?.message}</InputValid>\n              )}\n            </JoinElementInputBox>\n          </JoinElement>\n\n          <BtSection mgtop=\"90px\" mgbtm=\"0px\">\n            <CancelBt onClick={handleCancel}>취소</CancelBt>\n            {formState.isValid &&\n            uploadImgFile !== null &&\n            address &&\n            restAddress &&\n            nickOverlapConfirm &&\n            idOverlapConfirm ? (\n              <SaveBt type=\"submit\">저장</SaveBt>\n            ) : (\n              <SaveBt onClick={handleNotValid}>저장</SaveBt>\n            )}\n          </BtSection>\n        </JoinBox>\n      </JoinPageStyle>\n    </Layout>\n  );\n};\nexport default JoinKakaoPage;\n"],"names":["JoinKakaoPage","_formState$errors$nic","_formState$errors$pho","_formState$errors$ema","nickOverlapConfirm","setNickOverlapConfirm","useState","nickConfirmModal","setNickConfirmModal","nickFailModal","setNickFailModal","nickNullModal","setNickNullModal","nickPostSuccess","nickPostFail","uploadImg","setUploadImg","concat","process","uploadImgFile","setUploadImgFile","addrModal","setAddrModal","validationSchema","yup","shape","nickname","max","required","phoneNumber","matches","email","register","handleSubmit","formState","watch","useForm","resolver","yupResolver","mode","accessToken","URLSearchParams","location","search","get","userId","substring","startIndex","length","password","photo","setPhoto","address","setAddress","restAddress","setRestAddress","isValid","setIsValid","verificationModal","setVerificationModal","verificationId","setVerificationId","resultOk","setResultOk","verifiData","setVerifiData","verifiResultModal","setVerifiResultModal","catchErr","setCatchErr","navigate","useNavigate","_jsxs","Layout","children","_Fragment","_jsx","JoinPopUp","txt","onConfirm","closeNickConfirmModal","ModalBackground","closeNickFailModal","closeNickNullBt","VerificationModal","closeModal","closeVerificationModal","async","result","verificationGet","id","console","log","error","VerificationOk","verifiResultClose","Modal","handleClose","handleCloseModal","DaumPostcode","onComplete","data","selectedAddress","autoClose","JoinPageStyle","JoinHeader","src","JoinBox","onSubmit","formData","FormData","dto","Blob","JSON","stringify","addr","restAddr","uid","upw","nick","phone","iverificationInfo","type","append","response","fetch","blob","currentDate","Date","seconds","Math","floor","getTime","file","File","pair","entries","joinPost","obj","JoinElement","JoinElementTxt","JoinElementInputBox","JoinElementInput","htmlFor","ImageInputBt","onClick","document","getElementById","click","alt","accept","onChange","event","e","target","files","tempUrl","URL","createObjectURL","handleChangeFileOne","style","display","InputValid","width","maxLength","placeholder","name","ConfirmBt","preventDefault","NickOverlap","div","nickOverlapPost","nickNullBt","errors","message","JoinAddressInput","value","handleClickButton","readOnly","BtSection","mgtop","mgbtm","CancelBt","handleCancel","idOverlapConfirm","SaveBt"],"sourceRoot":""}