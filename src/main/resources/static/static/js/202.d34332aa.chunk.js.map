{"version":3,"file":"static/js/202.d34332aa.chunk.js","mappings":"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","sources":["api/report/report_api.js","styles/chat/ReportStyles.js","pages/chat/Report.js","util/jwtUtil.js"],"sourcesContent":["import axios from \"axios\";\nimport { SERVER_URL } from \"../config\";\nimport { jwtAxios } from \"../../util/jwtUtil\";\n\nconst path = `${SERVER_URL}/api`;\n\nconst apiPaths = {\n  user: \"dispute/user\",\n  product: \"dispute/product\",\n  payment: \"dispute/payment\",\n  chat: \"dispute/chat\",\n  board: \"dispute/board\",\n};\n\n// API 호출 함수\nexport const postReport = async data => {\n  try {\n    const url = `${path}/dispute/product`;\n    const res = await jwtAxios.post(url, data);\n\n    if (res.status === 200) {\n      console.log(\"신고가 성공적으로 접수되었습니다.\");\n      return res.data;\n    } else {\n      console.error(\"신고 접수 중 오류가 발생했습니다.\");\n      throw new Error(\"신고를 처리하는 동안 오류가 발생했습니다.\");\n    }\n  } catch (error) {\n    console.error(\"신고를 처리하는 동안 오류가 발생했습니다.\", error);\n    throw error;\n  }\n};\n","import styled from \"styled-components\";\n\nexport const PageWrapper = styled.div`\n  max-width: 1260px;\n  margin: 0 auto;\n  margin-top: 50px;\n  margin-bottom: 50px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\n\nexport const BoxWrapper = styled.div`\n  width: 705px;\n  height: auto;\n  padding: 18px;\n`;\n\nexport const ReportTitle = styled.div`\n  width: 100%;\n  font-size: 30px;\n  color: #181818;\n  font-weight: bold;\n  margin: 20px 0px 40px;\n`;\n\nexport const ReportUser = styled.div`\n  font-size: 16px;\n  width: 100%;\n  line-height: 45px;\n  height: 50px;\n  border-bottom: 1px solid #e5e5e5;\n  border-top: 1px solid #e5e5e5;\n  margin-bottom: 30px;\n`;\n\nexport const ReportTitleSub = styled.div`\n  font-size: 16px;\n  margin-bottom: 10px;\n`;\n\nexport const ReportText = styled.textarea`\n  width: 100%;\n  height: 20%;\n  resize: none;\n  outline: none;\n  padding: 16px 16px 90px;\n  border-radius: 6px;\n  background-color: #fafafa;\n  border: none;\n  font-size: 16px;\n  font-weight: bold;\n  line-height: 1.5;\n  letter-spacing: normal;\n  color: #333333;\n  margin-bottom: 20px;\n`;\n\nexport const Notice = styled.div`\n  font-size: 14px;\n  color: #333333;\n`;\n\nexport const ReportButton = styled.button`\n  width: 100%;\n  height: 7%;\n  background: red;\n  color: white;\n  font-size: 1.8rem;\n  font-weight: bold;\n  padding: 10px 20px;\n  border-radius: 8px;\n  border: none;\n  cursor: pointer;\n  margin-top: 20px;\n  margin-bottom: 40px;\n`;\n","import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useParams, useLocation } from \"react-router-dom\"; // useParams를 추가하여 사용\n\nimport Select from \"react-select\";\nimport { postReport } from \"../../api/report/report_api\";\nimport {\n  PageWrapper,\n  BoxWrapper,\n  ReportButton,\n  ReportTitle,\n  ReportTitleSub,\n  Notice,\n  ReportText,\n  ReportUser,\n} from \"../../styles/chat/ReportStyles\";\n\nconst reportOptions = [\n  {\n    label: \"분쟁\",\n    options: [\n      { value: \"1\", label: \"거래전 연락없음\" },\n      { value: \"2\", label: \"거래중 연락없음\" },\n      { value: \"3\", label: \"거짓 정보\" },\n      { value: \"4\", label: \"다른 제품\" },\n      { value: \"5\", label: \"비매너\" },\n      { value: \"6\", label: \"지각\" },\n    ],\n  },\n  {\n    label: \"사고\",\n    options: [\n      { value: \"7\", label: \"제품 손상\" },\n      { value: \"8\", label: \"제품 분실\" },\n    ],\n  },\n];\n\nconst customStyles = {\n  control: provided => ({\n    ...provided,\n    padding: \"3px 3px\",\n    border: \"1px solid #e5e5e5\",\n    borderRadius: \"6px\",\n    fontSize: \"18px\",\n    fontWeight: \"bold\",\n    color: \"#b2b2b2\",\n    marginBottom: \"30px\",\n  }),\n};\n\nconst Report = () => {\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [reportContent, setReportContent] = useState(\"\");\n\n  // useParams 훅을 사용하여 URL 파라미터에서 iproduct 값을 가져옴\n  const { iproduct } = useParams(); // useParams로 iproduct 값을 가져옴\n  const location = useLocation();\n  const { title } = location.state;\n  const handleReportSubmit = async () => {\n    try {\n      if (!selectedOption) {\n        alert(\"신고 사유를 선택해주세요.\");\n        return;\n      }\n      if (!reportContent.trim()) {\n        alert(\"신고 내용을 입력해주세요.\");\n        return;\n      }\n\n      const mappedReasonValue = selectedOption.value; // 선택된 옵션의 숫자값 가져오기\n\n      const response = await postReport({\n        reason: mappedReasonValue,\n        identity: iproduct,\n        details: reportContent,\n      });\n      console.log(\"신고가 접수되었습니다:\", response);\n      alert(\"신고가 성공적으로 접수되었습니다.\");\n    } catch (error) {\n      console.error(\"신고를 접수하는 도중 에러가 발생했습니다:\", error);\n      alert(\"신고를 접수하는 도중 에러가 발생했습니다.\");\n    }\n  };\n\n  return (\n    <PageWrapper>\n      <BoxWrapper>\n        <ReportTitle>신고하기</ReportTitle>\n        <ReportUser>신고상품: {title}</ReportUser>\n        <ReportTitleSub>신고 사유 선택</ReportTitleSub>\n        <Select\n          options={reportOptions}\n          placeholder=\"신고 사유를 선택해주세요\"\n          styles={customStyles}\n          value={selectedOption}\n          onChange={setSelectedOption}\n        />\n        <ReportTitleSub>신고 내용</ReportTitleSub>\n        <ReportText\n          placeholder=\"신고 내용을 입력해주세요\"\n          value={reportContent}\n          onChange={e => setReportContent(e.target.value)}\n        />\n        <ReportButton onClick={handleReportSubmit}>신고하기</ReportButton>\n        <Notice>\n          ・ 신고에 필요한 정보 외 개인정보를 포함하지 않도록 주의해주세요.\n          <br />\n          ・ 산업안전 보건법에 따라 고객응대 근로자 보호조치를 시행하고 있어요.\n          욕설 또는 폭언을 하지 말아주세요. <br />・ 접수는 24시간 가능하지만,\n          답변은 9시 - 18시 사이에 순차적으로 받을 수 있어요.\n        </Notice>\n      </BoxWrapper>\n    </PageWrapper>\n  );\n};\n\nexport default Report;\n","import axios from \"axios\";\nimport { getCookie, setCookie } from \"./cookieUtil\";\nimport { SERVER_URL } from \"../api/config\";\n\nexport const jwtAxios = axios.create();\n\nconst beforeReq = config => {\n  // console.log(\"1. 요청전 전달\", config);\n  // console.log(\"2. 쿠키로 토큰가져오기\");\n  const memberInfo = getCookie(\"member\");\n\n  if (!memberInfo) {\n    // console.log(\"쿠키 정보 없네요.\");\n    return Promise.reject({ response: { data: { error: \"Login하세요.\" } } });\n  }\n  // console.log(\"3. 쿠키에서 토큰 정보를 뜯는다.\");\n  const { accessToken } = memberInfo;\n  // console.log(\"4. 엑세스토큰 정보\", accessToken);\n  config.headers.Authorization = `Bearer ${accessToken}`;\n  return config;\n};\n\nconst requestFail = error => {\n  // console.log(\"요청후 실패시\", error);\n  return Promise.reject(error);\n};\n\nconst refreshJWT = async (accessToken, refreshToken) => {\n  const host = SERVER_URL;\n  const header = { headers: { Authorization: `Bearer ${accessToken}` } };\n  const res = await axios.get(\n    `${host}/api/user/refresh-token?refreshToken=${refreshToken}`,\n    header,\n  );\n  // console.log(\"1. refreshToken 토큰 요청\");\n  // console.log(\"2. 백엔드에서 새로 준 값\", res.data);\n  return res.data;\n};\n\nconst beforeRes = async res => {\n  // console.log(\"Response 전처리\", res);\n  const data = res.data;\n  // console.log(\"1. Response 오기전 서버 전달해준 데이터, data\");\n  if (data && data.error === \"ERROR_ACCESS_TOKEN\") {\n    // console.log(\"2. 일반적 오류가 아닌 엑세스 토큰 에러입니다.\");\n    // console.log(\"3. 새로운 토큰을 요청해야 합니다.\");\n    // console.log(\"4. 쿠키에 있는 정보를 읽어서 다시 시도합니다.\");\n    const memberInfo = getCookie(\"member\");\n    // console.log(\"5. 쿠키 토큰 정보 AccessToken\", memberInfo.accessToken);\n    // console.log(\"6. 쿠키 토큰 정보 RefreshToken\", memberInfo.refreshToken);\n    // console.log(\"7. 위의 정보로 새로운 토큰을 요청합니다.\");\n    const result = await refreshJWT(\n      memberInfo.accessToken,\n      memberInfo.refreshToken,\n    );\n    // console.log(\"8. 요청 이후 되돌아와서 새로운 정보로 쿠키를 업데이트\");\n    (memberInfo.accessToken = result.accessToken),\n      (memberInfo.refreshToken = result.refreshToken),\n      setCookie(\"member\", JSON.stringify(memberInfo));\n\n    // console.log(\"9. 데이터 요청하던 API 재요청\");\n    const originalRequest = res.config;\n    originalRequest.headers.Authorization = `Bearer ${result.accessToken}`;\n    return await axios(originalRequest);\n  }\n  return res;\n};\n\nconst responseFail = error => {\n  // console.log(\"Response Fail Err\", error);\n  return Promise.reject(error);\n};\n\njwtAxios.interceptors.request.use(beforeReq, requestFail);\njwtAxios.interceptors.response.use(beforeRes, responseFail);\n"],"names":["path","concat","SERVER_URL","PageWrapper","styled","div","_templateObject","_taggedTemplateLiteral","BoxWrapper","_templateObject2","ReportTitle","_templateObject3","ReportUser","_templateObject4","ReportTitleSub","_templateObject5","ReportText","textarea","_templateObject6","Notice","_templateObject7","ReportButton","button","_templateObject8","reportOptions","label","options","value","customStyles","control","provided","padding","border","borderRadius","fontSize","fontWeight","color","marginBottom","Report","selectedOption","setSelectedOption","useState","reportContent","setReportContent","iproduct","useParams","location","useLocation","title","state","_jsx","children","_jsxs","Select","placeholder","styles","onChange","e","target","onClick","async","alert","trim","mappedReasonValue","response","url","res","jwtAxios","post","data","status","console","log","error","Error","postReport","reason","identity","details","axios","create","interceptors","request","use","config","memberInfo","getCookie","Promise","reject","accessToken","headers","Authorization","result","refreshToken","host","header","get","refreshJWT","setCookie","JSON","stringify","originalRequest"],"sourceRoot":""}