{"version":3,"file":"static/js/745.f82c16a5.chunk.js","mappings":"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","sources":["api/chat/chat_api.js","styles/chat/ChatStyles.js","components/chat/ChatProfile.js","components/chat/Modal.js","components/chat/ChatBoxComponent.js","pages/chat/ChatPage.js","styles/CommonStyles.js","styles/details/DetailsComponentStyles.js"],"sourcesContent":["import axios from \"axios\";\nimport { SERVER_URL } from \"../config\";\nimport { jwtAxios } from \"../../util/jwtUtil\";\n\nconst path = `${SERVER_URL}/api`;\n\n//채팅방 목록\nexport const getChatList = async page => {\n  try {\n    const url = `${path}/chat?page=${page}`;\n    const res = await jwtAxios.get(url);\n\n    return res;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//채팅방 생성\nexport const postChat = async (iuser, iproduct) => {\n  try {\n    const url = `${path}/chat/room/${iuser}?iproduct=${iproduct}`;\n    const result = await jwtAxios.post(url);\n\n    if (result.status === 200) {\n      return 1;\n    }\n  } catch (error) {\n    console.error(error);\n    throw new Error(\"Failed to post chat\");\n  }\n};\n\n//채팅방 입장\nexport const getChat = async (ichat, page) => {\n  try {\n    const url = `${path}/chat/room/${ichat}?page=${page}`;\n    const result = await jwtAxios.get(url);\n\n    if (result.status === 200) {\n      return result.data;\n    }\n  } catch (error) {\n    console.error(error);\n    throw new Error(\"Failed to post chat\");\n  }\n};\n\n//채팅방 나가기 (삭제)\nexport const delChat = async ichat => {\n  try {\n    const url = `${path}/chat/${ichat}`;\n    const res = await jwtAxios.delete(url);\n    return res;\n  } catch (error) {\n    console.error(error);\n    throw new Error(\"Failed to post chat\");\n  }\n};\n\n// export const getUserInfo = async userId => {\n//   try {\n//     const url = `${path}/user?id=${userId}`;\n//     const res = await jwtAxios.get(url);\n//     return res.data;\n//   } catch (error) {\n//     console.log(error);\n//     throw new Error(\"Failed to get user info\");\n//   }\n// };\n","import styled from \"@emotion/styled\";\n\nexport const PageWrapper = styled.div`\n  max-width: 1280px;\n  height: 630px;\n  margin: 0 auto;\n\n  display: flex;\n  /* margin-top: 20px; */\n`;\n\nexport const ChatBox = styled.div`\n  width: 630px;\n\n  height: auto;\n  max-height: 627px;\n  flex-shrink: 0;\n  padding-left: 10px;\n  padding-right: 5px;\n  padding-top: 15px;\n  margin-right: 20px;\n  border: 1px solid #808080;\n  border-radius: 2px;\n  overflow: hidden; /* 넘치는 내용 숨김 */\n  overflow-y: auto;\n  position: relative;\n`;\n\nexport const ChatProfileBox = styled.div`\n  width: 600px;\n  height: 90px;\n  flex-shrink: 0;\n  justify-content: flex-end;\n  cursor: pointer; /* 클릭 가능하도록 커서 스타일 지정 */\n  pointer-events: auto; /* 클릭 이벤트 활성화 */\n`;\nexport const ChatBtn = styled.img`\n  font-size: 14px;\n  position: absolute;\n  cursor: pointer; /* 클릭 가능하도록 커서 스타일 지정 */\n  pointer-events: auto; /* 클릭 이벤트 활성화 */\n  right: 0; /* 오른쪽 끝으로 이동 */\n  width: 5%;\n  top: 10px;\n  margin-right: 20px;\n`;\n\nexport const ChatList = styled.div`\n  color: #000;\n  font-size: 16px;\n  font-weight: 400;\n  margin-bottom: 45px;\n`;\n\nexport const ProductContentWrapper = styled.div`\n  display: flex;\n  align-items: baseline; /* 제품명과 날짜를 수평 정렬하기 위해 추가 */\n`;\n\nexport const ProductContent = styled.div`\n  width: 380px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: #777;\n  font-size: 13px;\n  font-weight: 400;\n  margin-left: 90px;\n  margin-top: 10px;\n  line-height: 15px; /* Match with height for accurate calculation */\n  display: -webkit-box;\n  -webkit-line-clamp: 3; /* Show up to 3 lines */\n  -webkit-box-orient: vertical;\n`;\n\nexport const CurrentDate = styled.div`\n  width: 80px;\n  height: 15px;\n  color: #777;\n  font-size: 13px;\n  font-weight: 400;\n  margin-left: 40px;\n`;\n\nexport const ChatBoxWrapper = styled.div``;\n\nexport const ChatBoxContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end; // 새로운 메시지가 항상 하단에 위치하도록 설정합니다.\n\n  flex: 1;\n  overflow-y: auto; // 세로 스크롤이 필요할 경우 스크롤이 표시됩니다.\n`;\n\nexport const ChatBoxContent = styled.div`\n  /* width: 600px; */\n  max-width: 100%;\n  max-height: 550px;\n  /* min-height: 550px; */\n  height: 540px;\n  box-sizing: border-box;\n  background-color: #fff;\n  z-index: 5;\n  min-height: 0; /* 컨테이너의 최소 높이를 0으로 설정합니다. */\n`;\n\nexport const NoChatSelectedMessage = styled.p`\n  font-size: 16px;\n  text-align: center;\n  width: 600px;\n`;\n\nexport const ChatInput = styled.input`\n  width: 600px;\n  max-width: 100%; /* 최대 너비 설정 */\n  height: 50px;\n  border: 1px solid #ccc;\n  border-radius: 20px;\n  font-size: 16px;\n  background: #f2f2ff;\n  padding-left: 10px;\n`;\n\nexport const ProfileInfoContainer = styled.div`\n  display: inline-block;\n  margin-left: 10px;\n  /* margin-right: 200px; */\n`;\n\nexport const ChatText = styled.div`\n  max-height: 450px;\n  min-height: 450px;\n  height: 450px;\n  margin-bottom: 5px;\n  overflow-y: auto;\n  overflow-x: hidden;\n  padding-right: 10px;\n`;\n\nexport const ProfileName = styled.p`\n  font-size: 16px;\n  margin-bottom: 10px;\n  display: flex;\n`;\n\nexport const ChatMessage = styled.div`\n  background-color: #e5e5fe;\n  display: inline-block;\n  border-radius: 10px;\n\n  padding: 10px;\n  margin-bottom: 10px;\n  font-size: 13px;\n  /* text-align: right; */\n`;\n\nexport const ChatMessageWrapper = styled.div`\n  clear: both; /* 새로운 줄로 메시지를 배치합니다. */\n  overflow: hidden; /* 부모 요소의 높이를 계산하기 위해 사용됩니다. */\n  /* text-align: right; */\n  padding-right: 5px;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  ProfileContainer,\n  ProfileImg,\n  ProfileName,\n} from \"../../styles/details/DetailsComponentStyles\";\n\nimport {\n  ProductContent,\n  CurrentDate,\n  ProductContentWrapper,\n  ChatProfileBox,\n} from \"../../styles/chat/ChatStyles\";\n\n// ChatProfile 컴포넌트에서 API를 호출하기 위한 함수를 import\nimport { getChatList, getChat } from \"../../api/chat/chat_api\";\n\nconst ChatProfile = ({ onProfileSelect, setChatTextArrg }) => {\n  const [chatList, setChatList] = useState([]);\n\n  const [selectedProfile, setSelectedProfile] = useState(null);\n  const [enteredChatRoom, setEnteredChatRoom] = useState(null); // State to track entered chat room\n\n  useEffect(() => {\n    async function fetchChatList() {\n      try {\n        const page = 1;\n        const response = await getChatList(page);\n        setChatList(response.data);\n      } catch (error) {\n        console.error(\"Error fetching chat list:\", error);\n      }\n    }\n\n    fetchChatList();\n  }, []);\n\n  const handleProfileSelect = async profile => {\n    console.log(\"======================== profile : \", profile);\n    try {\n      // Call the getChat function to enter the chat room\n      const result = await getChat(profile.ichat, 1);\n      console.log(\"========== 채팅룸 진입 결과 : \", result);\n      if (result) {\n        setChatTextArr(result);\n        setSelectedProfile(profile);\n        setEnteredChatRoom(profile.ichat); // Set the entered chat room\n        onProfileSelect(profile); // Notify the parent component about the selected profile\n      }\n    } catch (error) {\n      console.error(\"Error entering chat room:\", error);\n    }\n  };\n\n  return (\n    <>\n      {chatList.map(data => (\n        <ChatProfileBox\n          key={data.ichat}\n          onClick={() => handleProfileSelect(data)}\n          selected={selectedProfile && selectedProfile.id === data.id}\n        >\n          <ProfileContainer>\n            <ProfileImg>\n              <img src={`/pic/${data.otherPersonPic}`} alt=\"Profile Image\" />\n            </ProfileImg>\n            <ProfileName>{data.otherPersonNm}</ProfileName>\n          </ProfileContainer>\n          <ProductContentWrapper>\n            <ProductContent>{data.title}</ProductContent>\n          </ProductContentWrapper>\n        </ChatProfileBox>\n      ))}\n    </>\n  );\n};\n\nChatProfile.propTypes = {\n  onProfileSelect: PropTypes.func.isRequired,\n};\n\nexport default ChatProfile;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"@emotion/styled\"; // 이모션에서 styled를 불러옵니다.\nimport { Link } from \"react-router-dom\";\nimport { delChat } from \"../../api/chat/chat_api\";\n\nconst ModalContent = styled.div`\n  background-color: #e5e5fe;\n  padding: 20px;\n  border-radius: 5px;\n  width: 100%;\n  position: relative; /* 부모 요소로부터 상대적으로 위치 설정 */\n  height: 60px;\n  font-size: 16px;\n  margin-bottom: 10px;\n`;\n\nconst Button = styled.button`\n  cursor: pointer;\n  background: none;\n  border: none;\n  padding: 0;\n  margin: 0;\n  font-size: inherit;\n  color: inherit;\n  display: flex;\n  align-items: center; /* 버튼 내의 요소를 세로 중앙에 정렬 */\n  justify-content: center; /* 버튼 내의 요소를 가로 중앙에 정렬 */\n`;\n\nconst ActionButtons = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nfunction Modal({ onClose }) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleCloseModal = () => {\n    setIsOpen(false);\n    if (typeof onClose === \"function\") {\n      onClose(); // 모달 닫기 함수 호출\n    }\n  };\n\n  const handleReportClick = () => {\n    console.log(\"신고하기 클릭됨\");\n    handleCloseModal();\n  };\n\n  const handleDeleteChat = async ichat => {\n    try {\n      // ichat을 인수로 전달하여 채팅을 삭제합니다.\n      const response = await delChat(ichat);\n      console.log(\"Chat deleted successfully:\", response);\n      // 채팅을 삭제한 후 추가적인 작업을 수행할 수 있습니다.\n    } catch (error) {\n      console.error(\"Failed to delete chat:\", error);\n      // 채팅 삭제 실패 시 추가적인 처리를 수행할 수 있습니다.\n    }\n  };\n  return (\n    <ModalContent>\n      <ActionButtons>\n        <Button as={Link} to={`/report`} onClick={handleReportClick}>\n          신고하기\n        </Button>\n        <Button onClick={handleDeleteChat}>채팅방 나가기</Button>\n      </ActionButtons>\n    </ModalContent>\n  );\n}\n\nexport default Modal;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  ChatBoxContainer,\n  ChatBoxWrapper,\n  ChatBoxContent,\n  ChatInput,\n  ProfileInfoContainer,\n  NoChatSelectedMessage,\n  ChatText,\n  ProfileName,\n  ChatMessage,\n  ChatMessageWrapper,\n  ChatBtn,\n} from \"../../styles/chat/ChatStyles\";\nimport Modal from \"./Modal\";\nimport { postChat } from \"../../api/chat/chat_api\"; // 채팅 생성 API import\nimport { getCookie } from \"../../util/cookieUtil\"; // 쿠키 유틸 함수 import\nimport { Client } from \"@stomp/stompjs\"; // STOMP 클라이언트 추가\nimport useCustomLogin from \"../../hooks/useCustomLogin\";\n\nconst ChatBoxComponent = ({ selectedProfile, chatTextArr }) => {\n  const { loginState } = useCustomLogin();\n  // console.log(\"=================\", loginState.iuser);\n\n  // console.log(\"====== ChatBoxComponent ======\", chatTextArr);\n  const [inputMessage, setInputMessage] = useState(\"\"); // 입력 메시지를 저장하는 상태\n  const [chatMessages, setChatMessages] = useState([]); // 채팅 메시지를 저장하는 상태\n  const [modalOpen, setModalOpen] = useState(false); // 모달 열림 상태를 관리하는 상태\n  const [stompClient, setStompClient] = useState(null); // STOMP5 클라이언트 상태 추가\n  const chatContainerRef = useRef(null); // 채팅 스크롤을 위한 ref 추가\n  const memberInfo = getCookie(\"member\");\n  const authToken = memberInfo ? memberInfo.accessToken : \"your_default_token\";\n\n  // WebSocket 연결 함수 정의\n  const connectToChat = async () => {\n    try {\n      const stomp = new Client({\n        brokerURL: \"ws://192.168.0.144:5226/ws\", // WebSocket 연결 주소\n        connectHeaders: {\n          Authorization: `Bearer ${authToken}`, // AccessToken 헤더에 추가\n        },\n        debug: str => {\n          console.log(str);\n        },\n        reconnectDelay: 20000, // 자동 재연결 딜레이\n        heartbeatIncoming: 40000, // Heartbeat 수신 주기\n        heartbeatOutgoing: 40000, // Heartbeat 발신 주기\n      });\n\n      stomp.onStompError = () => {\n        console.log(\"연결실패\");\n      };\n\n      // STOMP 클라이언트 설정 및 연결\n      stomp.onConnect = () => {\n        // console.log(\"==================== WebSocket 연결이 열렸습니다.\");\n        // console.log(\n        //   \"==================== iChat 값이 궁금해 : \",\n        //   selectedProfile,\n        // );\n\n        // 구독 대상 설정\n        // const subscriptionDestination = selectedProfile.iuser\n        const subscriptionDestination = loginState.iuser\n          ? `/exchange/chat.exchange/room.${selectedProfile.otherPersonIuser}`\n          : `/exchange/chat.exchange/room.${selectedProfile.ichat}`;\n\n        console.log(\"==== subscriptionDestination : \", subscriptionDestination);\n        // 메시지 수신 처리\n        stomp.subscribe(subscriptionDestination, frame => {\n          try {\n            const parsedMessage = JSON.parse(frame.body);\n            console.log(parsedMessage);\n            // 채팅 메시지 업데이트\n            setChatMessages(prevMessages => [...prevMessages, parsedMessage]);\n            scrollToBottom();\n          } catch (error) {\n            console.error(\"오류가 발생했습니다:\", error);\n          }\n        });\n      };\n\n      // STOMP 클라이언트 설정 및 연결\n      stomp.activate();\n      setStompClient(stomp);\n    } catch (error) {\n      console.error(\"WebSocket 연결 중 오류가 발생했습니다:\", error);\n    }\n  };\n\n  // 스크롤을 맨 아래로 이동하는 함수\n  const scrollToBottom = () => {\n    // console.log(chatContainerRef.current);\n    // console.log(chatContainerRef.current.scrollTop);\n    // console.log(chatContainerRef.current.scrollHeight);\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop =\n        chatContainerRef.current.scrollHeight;\n      chatContainerRef.current.offsetHeight;\n      chatContainerRef.current.scrollTop =\n        chatContainerRef.current.scrollHeight;\n    }\n  };\n  // 스크롤 젤 아래로\n  const chatBoxRef = useRef(null);\n\n  useEffect(() => {\n    // chatBoxRef.current가 존재하고 스크롤을 조작할 수 있는 엘리먼트인지 확인\n    if (chatBoxRef.current) {\n      // 스크롤을 항상 아래로 이동\n      chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  // useEffect를 사용하여 컴포넌트가 마운트될 때 WebSocket 연결\n  useEffect(() => {\n    connectToChat();\n    scrollToBottom();\n    // 컴포넌트 언마운트 시 WebSocket 연결 해제\n    return () => {\n      if (stompClient) {\n        stompClient.deactivate();\n      }\n    };\n  }, [selectedProfile]); // 선택된 프로필이 변경될 때마다 useEffect 다시 실행\n\n  const sendMessage = async () => {\n    // 메시지 전송\n    if (stompClient && stompClient.connected && selectedProfile) {\n      const { otherIuser, iuser } = selectedProfile;\n      // const destination = `/pub/chat.message.${otherIuser}`;\n      const destination = `/pub/chat.message.${selectedProfile.ichat}`;\n\n      const sendMSG = {\n        content: inputMessage,\n        // sender: selectedProfile.iuser,\n        sender: loginState.iuser,\n      };\n\n      console.log(\"리액트에서 보낸 데이터 형식 \", sendMSG);\n\n      stompClient.publish({\n        destination,\n        body: JSON.stringify(sendMSG),\n      });\n    }\n\n    setInputMessage(\"\");\n  };\n\n  // 입력 메시지 변경 핸들러\n  const handleInputChange = e => {\n    setInputMessage(e.target.value);\n  };\n\n  // 엔터 키 입력 핸들러\n  const handleKeyPress = async e => {\n    if (e.key === \"Enter\" && inputMessage.trim() !== \"\") {\n      const newMessage = {\n        text: inputMessage,\n        isSender: true,\n      };\n\n      // Chat API 호출\n      try {\n        await sendMessage();\n        console.log(\"채팅 메시지 전송 성공\");\n      } catch (error) {\n        console.error(\"채팅 메시지 전송 실패:\", error);\n      }\n\n      setChatMessages(prevMessages => [...prevMessages, newMessage]);\n      setInputMessage(\"\"); // 입력 메시지 초기화\n      scrollToBottom();\n    }\n  };\n\n  // 모달 열기/닫기 토글 핸들러\n  const toggleModal = () => {\n    setModalOpen(prevModalOpen => !prevModalOpen);\n  };\n\n  return (\n    <ChatBoxWrapper>\n      {selectedProfile ? (\n        <ChatBoxContainer>\n          <ChatBoxContent>\n            <img\n              src={`/pic/${selectedProfile.otherPersonPic}`}\n              alt=\"Profile\"\n              style={{\n                width: \"60px\",\n                height: \"60px\",\n                borderRadius: \"50%\",\n                marginBottom: \"20px\",\n              }}\n            />\n            <ProfileInfoContainer>\n              <ChatBtn\n                onClick={toggleModal}\n                src=\"/images/chat/more.png\"\n                alt=\"more\"\n              />\n              <ProfileName>{selectedProfile.otherPersonNm}</ProfileName>\n              <p>{selectedProfile.title}</p>\n            </ProfileInfoContainer>\n            <ChatText ref={chatContainerRef}>\n              {modalOpen && <Modal onClose={toggleModal} />}\n              <ChatBoxContent>\n                {/* 기존글 출력하기 */}\n                {chatTextArr.map((item, index) => (\n                  <ChatMessageWrapper\n                    key={index}\n                    style={\n                      item.isender == selectedProfile.otherPersonIuser\n                        ? { textAlign: \"start\" }\n                        : { textAlign: \"end\" }\n                    }\n                  >\n                    <ChatMessage\n                      style={\n                        item.isender == selectedProfile.otherPersonIuser\n                          ? { background: \"#e6e6fa\" }\n                          : { background: \"#fafad2\" }\n                      }\n                    >\n                      {item.senderNick} : {item.msg}\n                    </ChatMessage>\n                  </ChatMessageWrapper>\n                ))}\n\n                {chatMessages.map((message, index) => (\n                  <ChatMessageWrapper\n                    key={index}\n                    style={\n                      message.isSender == selectedProfile.otherPersonIuser\n                        ? { textAlign: \"start\" }\n                        : { textAlign: \"end\" }\n                    }\n                  >\n                    <ChatMessage\n                      style={\n                        message.isender == selectedProfile.otherPersonIuser\n                          ? { background: \"#e6e6fa\" }\n                          : { background: \"#fafad2\" }\n                      }\n                    >\n                      {message.text}\n                    </ChatMessage>\n                  </ChatMessageWrapper>\n                ))}\n              </ChatBoxContent>\n            </ChatText>\n          </ChatBoxContent>\n          <ChatInput\n            type=\"text\"\n            placeholder=\"메시지를 입력하세요\"\n            value={inputMessage} // 입력값 바인딩\n            onChange={handleInputChange} // 입력값 변경 핸들러\n            onKeyPress={handleKeyPress} // 엔터 키 입력 핸들러\n          />\n        </ChatBoxContainer>\n      ) : (\n        <NoChatSelectedMessage>\n          프로필을 선택하여 채팅을 시작하세요.\n        </NoChatSelectedMessage>\n      )}\n    </ChatBoxWrapper>\n  );\n};\n\nexport default ChatBoxComponent;\n","import React, { useEffect, useState } from \"react\";\nimport { PageWrapper, ChatBox, ChatList } from \"../../styles/chat/ChatStyles\";\nimport ChatProfile from \"../../components/chat/ChatProfile\";\n\nimport Layout from \"../../layouts/Layout\";\nimport ChatBoxComponent from \"../../components/chat/ChatBoxComponent\";\n\nconst ChatPage = () => {\n  // 챗팅 글자들의 목록\n  const [chatTextArr, setChatTextArr] = useState([]);\n\n  const [selectedProfile, setSelectedProfile] = useState(null);\n\n  const handleProfileSelect = profile => {\n    setSelectedProfile(profile);\n  };\n\n  useEffect(() => {\n    console.log(\"채팅목록 자여왔ㅇ요.\", chatTextArr);\n  }, [chatTextArr]);\n  return (\n    <Layout>\n      <PageWrapper>\n        <ChatBox>\n          <ChatList>\n            채팅 목록 <img src=\"/images/chat/Vector.svg\" alt=\"Vector\" />\n          </ChatList>\n          <ChatProfile\n            onProfileSelect={handleProfileSelect}\n            setChatTextArr={setChatTextArr}\n          />\n        </ChatBox>\n        <ChatBox>\n          <ChatBoxComponent\n            selectedProfile={selectedProfile}\n            chatTextArr={chatTextArr}\n          />\n        </ChatBox>\n      </PageWrapper>\n    </Layout>\n  );\n};\n\nexport default ChatPage;\n","export const Common = {\n  // 숫자가 높을수록 밝은 색\n  color: {\n    primary: \"#2C39B5\",\n    p100: \"#000000\",\n    p200: \"#4B4B4B\",\n    p300: \"#777777\",\n    p400: \"#E4E7FF\",\n    p500: \"#F2F2FF\",\n    p600: \"#FFFFFF\",\n  },\n};\n","import styled from \"@emotion/styled\";\nimport { Common } from \"../CommonStyles\";\n\n// Like styles\nexport const StyledButton = styled.button`\n  display: block;\n  margin-top: 50px;\n  right: 12px;\n  background: none;\n  border: none;\n  cursor: pointer;\n\n  img {\n    width: 40px !important;\n    height: 35px !important;\n  }\n`;\n\n// Pay styles\nexport const Overlay = styled.div`\n  width: 1260px;\n  margin: 0 auto;\n  margin-bottom: 9rem;\n`;\n\nexport const ModalContainer = styled.div`\n  width: 100%;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 1);\n`;\n\nexport const Box = styled.div`\n  width: 470px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-bottom: 1px solid ${Common.color.primary};\n`;\n\nexport const SubBox = styled.div`\n  padding: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n  width: 470px;\n  margin: 0 auto;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Image = styled.img`\n  width: 190px;\n  height: 190px;\n  margin-right: 25px;\n  margin-bottom: 40px;\n  border-radius: 10px;\n`;\n\nexport const TextContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Title = styled.h3`\n  width: 202px;\n  height: 37px;\n  color: #000;\n  font-size: 15px;\n  font-weight: 500;\n`;\n\nexport const Duration = styled.div`\n  width: 205px;\n  height: 20px;\n  color: #000;\n  font-size: 13px;\n  font-weight: 400;\n  margin-bottom: 40px;\n`;\n\nexport const PriceRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const PriceLabel = styled.div`\n  width: auto;\n  height: 14px;\n\n  color: #000;\n\n  font-size: 13px;\n\n  font-weight: 400;\n\n  margin-bottom: 18px;\n`;\n\nexport const PriceValue = styled(PriceLabel)`\n  width: 75px;\n  text-align: right;\n`;\n\nexport const TotalPrice = styled.div`\n  border-bottom: 1px solid ${Common.color.primary};\n  margin-bottom: 15px;\n`;\n\nexport const BtnCard = styled.div`\n  width: 430px;\n  height: 70px;\n  flex-shrink: 0;\n  border-radius: 5px;\n\n  align-items: center;\n  justify-content: center;\n  color: #000;\n  font-size: 16px;\n  display: flex;\n\n  text-align: center;\n  cursor: pointer;\n\n  color: ${props => (props.clicked ? \"#fff\" : \"#000\")};\n  background-color: ${props => (props.clicked ? \"#2c39b5\" : \"#f2f2ff\")};\n\n  &:hover {\n    background: #2c39b5;\n    color: #f2f2ff;\n  }\n`;\nexport const BtnPayList = styled(BtnCard)`\n  width: 140px;\n  height: 70px;\n  flex-shrink: 0;\n`;\n\nexport const BtnCancel = styled.div`\n  width: 200px;\n  height: 46px;\n  flex-shrink: 0;\n  border-radius: 10px;\n  border: 1px solid #2c39b5;\n  color: #2c39b5;\n  margin-top: 45px;\n  font-family: Inter;\n  font-size: 16px;\n\n  font-weight: 400;\n  line-height: normal;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  &:hover {\n    background: #2c39b5;\n    color: #fff;\n  }\n`;\n\nexport const BtnPay = styled(BtnCancel)`\n  color: #2c39b5;\n\n  margin-left: 20px;\n`;\n\n//ProFile styles\nexport const ProfileContainer = styled.div`\n  width: 100%;\n  height: 20px;\n  display: flex;\n\n  gap: 1rem;\n`;\n\nexport const SellerProfileContainer = styled.div`\n  width: 100%;\n  height: 50px;\n  position: absolute;\n  margin-left: 500px;\n  gap: 1rem;\n`;\n\nexport const ProfileImg = styled.div`\n  width: 70px;\n  height: 70px;\n  box-sizing: border-box;\n  border-radius: 45px;\n  overflow: hidden;\n  font-size: 16px;\n\n  img {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nexport const ProfileName = styled.div`\n  width: 70px;\n  height: 20px;\n  color: #000;\n  font-size: 14px;\n  font-weight: 400;\n  display: flex;\n  justify-content: center; /* 가로 중앙 정렬 */\n`;\n\n//Review styles\n\nexport const ReviewFormStyle = styled.div`\n  width: 1260px;\n  height: 380px;\n  flex-shrink: 0;\n  border-radius: 10px;\n  border: 1px solid #2c39b5;\n  padding-left: 20px;\n  padding-top: 15px;\n  font-size: 16px;\n`;\n\nexport const ReviewProfile = styled.div`\n  margin-top: 25px;\n\n  width: 1220px;\n  height: auto;\n  flex-shrink: 0;\n  position: relative; /* 상대 위치 설정 */\n`;\n\nexport const ReviewProfileLine = styled.div`\n  width: 100%;\n\n  border-bottom: 1px solid #2c39b5;\n  margin-top: 25px;\n`;\n\nexport const CurrentDate = styled.div`\n  width: 80px;\n  height: 15px;\n  color: #777;\n  font-size: 13px;\n  font-weight: 400;\n\n  margin-left: auto;\n`;\n\nexport const BtnStyles = styled.button`\n  display: flex;\n  width: 103px;\n  height: 36px;\n\n  justify-content: center;\n  align-items: center;\n  flex-shrink: 0;\n  margin: auto;\n  margin-top: 10px;\n\n  background-color: #fff;\n  border-radius: 50px;\n  border: 1px solid #2c39b5;\n  cursor: pointer;\n  &:hover {\n    background: #2c39b5;\n    color: #fff;\n  }\n`;\n\nexport const BtnReivew = styled(BtnStyles)`\n  width: 79px;\n  margin-right: 60px;\n  margin-top: -20px;\n`;\n\nexport const ReviewText = styled.div`\n  width: 550px;\n  height: auto;\n  color: #777;\n  font-size: 12px;\n  font-weight: 400;\n  margin-left: 92px;\n  margin-top: 10px;\n  white-space: pre-line;\n`;\n\n// ReportPost styles\nexport const ReportBox = styled.div`\n  padding: 22px;\n  width: 600px;\n  height: 0 auto;\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  padding: 60px;\n\n  position: fixed;\n  top: 200px; /* 원하는 높이로 수정 */\n  left: 50%;\n  transform: translateX(-50%);\n  z-index: 99;\n  background-color: #fff;\n`;\nexport const ReportText = styled.div`\n  width: 100%;\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n  -webkit-box-pack: justify;\n  justify-content: space-between;\n  color: rgb(102, 102, 102);\n  height: 60px;\n  font-size: 16px;\n  padding-left: 20px px;\n  border-bottom: 1px solid rgb(150, 150, 150);\n`;\n\nexport const ReportTitle = styled.div`\n  letter-spacing: 5.2px;\n  font-size: 26px;\n  padding-bottom: 30px;\n  border-bottom: 1px solid rgb(33, 33, 33);\n  margin-bottom: 45px;\n`;\n"],"names":["path","concat","SERVER_URL","getChatList","async","url","page","jwtAxios","get","error","console","log","postChat","iuser","iproduct","post","status","Error","getChat","ichat","result","data","delChat","delete","PageWrapper","styled","div","_templateObject","_taggedTemplateLiteral","ChatBox","_templateObject2","ChatProfileBox","_templateObject3","ChatBtn","img","_templateObject4","ChatList","_templateObject5","ProductContentWrapper","_templateObject6","ProductContent","_templateObject7","ChatBoxWrapper","_templateObject8","_templateObject9","ChatBoxContainer","_templateObject10","ChatBoxContent","_templateObject11","NoChatSelectedMessage","p","_templateObject12","ChatInput","input","_templateObject13","ProfileInfoContainer","_templateObject14","ChatText","_templateObject15","ProfileName","_templateObject16","ChatMessage","_templateObject17","ChatMessageWrapper","_templateObject18","_ref","onProfileSelect","setChatTextArrg","chatList","setChatList","useState","selectedProfile","setSelectedProfile","enteredChatRoom","setEnteredChatRoom","useEffect","response","fetchChatList","_jsx","_Fragment","children","map","_jsxs","onClick","profile","setChatTextArr","handleProfileSelect","selected","id","ProfileContainer","ProfileImg","src","otherPersonPic","alt","otherPersonNm","title","ModalContent","Button","button","ActionButtons","onClose","isOpen","setIsOpen","as","Link","to","handleReportClick","chatTextArr","loginState","useCustomLogin","inputMessage","setInputMessage","chatMessages","setChatMessages","modalOpen","setModalOpen","stompClient","setStompClient","chatContainerRef","useRef","memberInfo","getCookie","authToken","accessToken","scrollToBottom","current","scrollTop","scrollHeight","offsetHeight","chatBoxRef","stomp","Client","brokerURL","connectHeaders","Authorization","debug","str","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onStompError","onConnect","subscriptionDestination","otherPersonIuser","subscribe","frame","parsedMessage","JSON","parse","body","prevMessages","activate","connectToChat","deactivate","toggleModal","prevModalOpen","style","width","height","borderRadius","marginBottom","ref","Modal","item","index","isender","textAlign","background","senderNick","msg","message","isSender","text","type","placeholder","value","onChange","e","target","onKeyPress","key","trim","newMessage","connected","otherIuser","destination","sendMSG","content","sender","publish","stringify","sendMessage","ChatPage","Layout","ChatProfile","ChatBoxComponent","Common","color","primary","p100","p200","p300","p400","p500","p600","StyledButton","Overlay","Box","SubBox","Image","TextContainer","Title","h3","Duration","PriceRow","PriceLabel","PriceValue","TotalPrice","BtnCard","props","clicked","BtnCancel","BtnPay","SellerProfileContainer","_templateObject19","_templateObject20","_templateObject21","ReviewFormStyle","_templateObject22","ReviewProfile","_templateObject23","ReviewProfileLine","_templateObject24","BtnStyles","_templateObject25","_templateObject26","ReviewText","_templateObject27","_templateObject28","_templateObject29","_templateObject30","_templateObject31"],"sourceRoot":""}