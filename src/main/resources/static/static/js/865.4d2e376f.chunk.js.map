{"version":3,"file":"static/js/865.4d2e376f.chunk.js","mappings":"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","sources":["api/join/join_api.js","api/login/kakao_api.js","hooks/useCustomLogin.js","pages/login/KakaoRedirectPage.js"],"sourcesContent":["import axios from \"axios\";\nimport { SERVER_URL } from \"../config\";\n\n// 회원가입\n\nexport const joinPost = async ({obj}) => {\n  try {\n    const header = {headers: {\"Content-Type\": \"multipart/form-data\"}};\n    const res = await axios.post(`${SERVER_URL}/api/user/signup`, obj, header);\n    const resStatus = res.status.toString();\n    if (resStatus.charAt(0) === \"2\") {\n      console.log({ ...res.data });\n      // postSuccess(res.data);\n      return res.data;\n\n    } else {\n      alert(\"데이터 전송에 실패했습니다.\");\n    }\n  } catch (error) {\n    console.log(error);\n\n    // postFail();\n\n  }\n};\n\n// 중복확인(닉네임)\nexport const nickOverlapPost = async (\n  obj,\n  nickPostSuccess,\n  nickPostFail,\n) => {\n  try {\n    const res = await axios.post(`${SERVER_URL}/api/user/check`, obj);\n    const resStatus = res.status.toString();\n    if (resStatus.charAt(0) === \"2\") {\n      console.log({ ...res.data });\n      nickPostSuccess(res.data);\n    // } else if (res.status == 427) {\n    //   nickPostFail();\n    } else {\n      alert(\"데이터 전송에 실패했습니다.\");\n    }\n  } catch (error) {\n    nickPostFail();\n  }\n};\n\n// 중복확인(아이디)\nexport const idOverlapPost = async (\n  obj,\n  idPostSuccess,\n  idPostFail,\n) => {\n  try {\n    const res = await axios.post(`${SERVER_URL}/api/user/check`, obj);\n    const resStatus = res.status.toString();\n    if (resStatus.charAt(0) === \"2\") {\n      console.log({ ...res.data });\n      idPostSuccess(res.data);\n    // } else if (res.status == 432) {\n    //   idPostFail();\n    } else {\n      alert(\"데이터 전송에 실패했습니다.\");\n    }\n  } catch (error) {\n    idPostFail();\n  }\n};\n\n// 본인인증 요청\nexport const verificationPost = async (obj) => {\n  try {\n    const res = await axios.post(`${SERVER_URL}/api/user/verification`, obj);\n    return res.data;\n  } catch (error) {\n    console.log(\"error\");\n  }\n}\n\nexport const verificationGet = async (id) => {\n  try {\n    if (!id) {\n      console.log(\"id가 정의되지 않았습니다.\");\n      return; // id가 정의되지 않은 경우 함수 종료\n    }\n    const res = await axios.get(`${SERVER_URL}/api/user/verification?id=${id}`);\n    return res.data;\n  } catch (error) {\n    console.log(\"error\");\n  }\n}","import axios from \"axios\";\nimport { SERVER_URL } from \"../config\";\n// 앱 등록시 Rest 키 값(절대 오픈 금지)\nconst client_id = \"beae94b18549648a1e9a98b4e0d945b2\";\n// 카카오 로그인 통과시 이동할 주소\nconst redirect_uri = \"http://localhost:3000/login/kakao\";\n// 카카오 로그인 문서 참조\nconst auth_code_path = \"https://kauth.kakao.com/oauth/authorize\";\nconst response_type = \"code\";\nconst authParam = new URLSearchParams({\n  client_id,\n  redirect_uri,\n  response_type,\n});\n\n// 카카오 로그인시 활용\nexport const getKakaoLoginLink = () => {\n  const kakaoURL = `${auth_code_path}?${authParam.toString()}`;\n  return kakaoURL;\n};\n// access 토큰 받기 경로\nconst access_token_url = `https://kauth.kakao.com/oauth/token`;\nexport const getAccessToken = async authCode => {\n  const header = {\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\",\n    },\n  };\n\n  const params = {\n    grant_type: \"authorization_code\",\n    client_id: client_id,\n    redirect_uri: redirect_uri,\n    code: authCode,\n  };\n\n  const res = await axios.post(access_token_url, params, header);\n  const accessToken = res.data.access_token;\n  return accessToken;\n};\n\n// Access Token 으로 회원정보 가져오기\nexport const getMemberWithAccessToken = async accessToken => {\n  const response = await fetch(\"https://kapi.kakao.com/v2/user/me\", {\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n  if (response.ok) {\n    const memberInfo = await response.json();\n    // const uniqueID = memberInfo.id;\n    // console.log(\"Unique ID: \", uniqueID);\n    return memberInfo;\n  } else {\n    throw new Error(\"Failed to get member info\");\n  }\n};\n\n// 카카오 로그아웃\nexport const kakaoLogout = async accessToken => {\n  const response = await fetch(\"https://kapi.kakao.com/v1/user/logout\", {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n  if (response.ok) {\n    console.log(\"Logout successful\");\n    document.cookie = \"cookieName=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n  } else {\n    console.log(\"Logout failed\");\n  }\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\nimport { loginPostAsync, logout } from \"../slices/loginSlice\";\nimport { kakaoLogout } from \"../api/login/kakao_api\";\n\nconst useCustomLogin = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  // RTK 상태값 읽기\n  const loginState = useSelector(state => state.loginSlice);\n  // 로그인 상태값 파악\n  const isLogin = sessionStorage.getItem(\"isLogin\") === \"true\";\n  // 로그인 기능\n  const doLogin = async ({ loginParam, successFn, failFn, errorFn }) => {\n    const action = await dispatch(\n      loginPostAsync({ loginParam, successFn, failFn, errorFn }),\n    );\n    return action.payload;\n  };\n  // 일반유저 vs 관리자\n  const userAuth = sessionStorage.getItem(\"userAuth\");\n\n  // 로그아웃 기능\n  const doLogout = () => {\n    dispatch(logout());\n    kakaoLogout();\n  };\n  // 패스이동 기능\n  const moveToPath = path => {\n    navigate({ pathname: path }, { replace: true });\n  };\n  // 로그인 페이지 이동 기능\n  const moveToLogin = () => {\n    return <Navigate replace to=\"/member/login\" />;\n  };\n\n  return {\n    loginState,\n    isLogin,\n    doLogin,\n    doLogout,\n    moveToPath,\n    moveToLogin,\n    userAuth,\n  };\n};\n\nexport default useCustomLogin;\n","import React, { useEffect } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport {\n  getAccessToken,\n  getMemberWithAccessToken,\n} from \"../../api/login/kakao_api\";\nimport { useDispatch } from \"react-redux\";\nimport { login } from \"../../slices/loginSlice\";\nimport useCustomLogin from \"../../hooks/useCustomLogin\";\nimport { idOverlapPost } from \"../../api/join/join_api\";\n\nconst KakaoRedirectPage = () => {\n  const navigate = useNavigate();\n  const [uRLSearchParams, setURLSearchParams] = useSearchParams();\n  // 인증코드 파악하기\n  const authCode = uRLSearchParams.get(\"code\");\n  // 로그인 과정을 위한 loginSlice 을 통해서 로그인시도\n  const dispatch = useDispatch();\n  const { moveToPath } = useCustomLogin();\n\n  // 인증코드로 Access Token 요청하기\n  useEffect(() => {\n    getAccessToken(authCode).then(async accessToken => {\n      // async keyword added\n      console.log(\"access Token\", accessToken);\n      // 개인 정보 호출\n      getMemberWithAccessToken(accessToken).then(async memberInfo => {\n        // async keyword added\n        // API 백엔드 서버로 로그인을 시도합니다.\n        dispatch(login(memberInfo));\n\n        // 사용자의 닉네임과 이메일을 가져옵니다.\n        const nickname = memberInfo[\"properties\"][\"nickname\"];\n        const email = memberInfo[\"kakao_account\"][\"email\"];\n        const uniqueID = memberInfo.id;\n        console.log(\"Unique ID: \", uniqueID);\n        console.log(\"Nickname: \", nickname);\n        console.log(\"Email: \", email);\n\n        // const idPostSuccess = async () => {\n        //   navigate(`/join/kakao?UniqueID=${uniqueID}`);\n        // };\n        // const idPostFail = async () => {\n        //   navigate(`/`);\n        // };\n\n        // 기존회원 유무 확인\n        const obj = {\n          div: 2,\n          uid: uniqueID,\n          nick: \"nickname\",\n        };\n        await idOverlapPost(obj);\n        try {\n            navigate(`/join/kakao?uniqueID=${uniqueID}`);\n        } catch (error) {\n            navigate(`/`);\n        }\n      });\n    });\n  }, [authCode]);\n\n  return (\n    <div>\n      <h1>카카오 리다이렉트 페이지</h1>\n      <div>{authCode}</div>\n    </div>\n  );\n};\nexport default KakaoRedirectPage;\n"],"names":["joinPost","async","obj","_ref","header","headers","res","axios","post","concat","SERVER_URL","status","toString","charAt","console","log","data","alert","error","nickOverlapPost","nickPostSuccess","nickPostFail","idOverlapPost","idPostSuccess","idPostFail","verificationPost","verificationGet","id","get","client_id","redirect_uri","authParam","URLSearchParams","response_type","getKakaoLoginLink","getAccessToken","params","grant_type","code","authCode","access_token","getMemberWithAccessToken","response","fetch","Authorization","accessToken","ok","json","Error","kakaoLogout","method","document","cookie","useCustomLogin","navigate","useNavigate","dispatch","useDispatch","loginState","useSelector","state","loginSlice","isLogin","sessionStorage","getItem","doLogin","loginParam","successFn","failFn","errorFn","loginPostAsync","payload","doLogout","logout","moveToPath","path","pathname","replace","moveToLogin","_jsx","Navigate","to","userAuth","KakaoRedirectPage","uRLSearchParams","setURLSearchParams","useSearchParams","useEffect","then","login","memberInfo","nickname","email","uniqueID","div","uid","nick","_jsxs","children"],"sourceRoot":""}